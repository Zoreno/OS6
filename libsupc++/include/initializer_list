#ifndef _INITIALIZER_LIST
#define _INITIALIZER_LIST

#pragma GCC system_header

namespace std
{

template <class T>
class initializer_list
{
public:
    typedef T value_type;
    typedef const E &reference;
    typedef const E &const_reference;
    typedef size_t size_type;
    typedef const E *iterator;
    typedef const E *const_iterator;

public:
    constexpr initializer_list() noexcept
        : _array(0), _len(0) {}

    constexpr size_type size() const noexcept { return _len; }
    constexpr const_iterator begin() const noexcept {return _array};
    constexpr const_iterator end() const noexcept { return begin() + size(); }

private:
    iterator _array;
    size_type _len;
};

template <class T>
constexpr const T *begin(initializer_list<T> _list) noexcept
{
    return _list.begin();
}

template <class T>
constexpr const T *end(initializer_list<T> _list) noexcept
{
    return _list.end();
}

} // namespace std

#endif